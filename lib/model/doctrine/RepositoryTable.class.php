<?php

/**
 * RepositoryTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class RepositoryTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object RepositoryTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Repository');
    }

    /**
     * @param string $name
     * @param string $owner
     * @return Repository
     */
    public function findOrCreateByNameAndOwnerName($name, $ownerName) {
        if ($repo = $this->createQuery()
                ->where('name = ? AND owner = ?', array($name, $ownerName))
                ->fetchOne()) {
            return $repo;
        }

        $gitHub = new phpGithubApi();
        $info = $gitHub->getRepoApi()->show($ownerName, $name);

        $owner = doGitHubUserTable::getInstance()->findOrCreateByUsername($ownerName);

        $repo = new Repository();
        $repo->name = $info['name'];
        $repo->owner = $info['owner'];
//        $repo->source = $info['source'];
//        $repo->parent = $info['parent'];
        $repo->description = $info['description'];
        $repo->forks = $info['forks'];
        $repo->watchers = $info['watchers'];
        $repo->private = (boolean) $info['private'];
        $repo->fork = $info['fork'];
        $repo->homepage = $info['homepage'];
        $repo->has_wiki = (boolean) $info['has_wiki'];
        $repo->has_issues = (boolean) $info['has_issues'];
        $repo->has_downloads = (boolean) $info['has_downloads'];

        $req = new Requirement();
				$req->type = 'symfony';
				if (preg_match('~Plugin$~', $repo->name)) {
          $req->value = '1.4';
          $repo->type = 'plugin';
        }
				if (preg_match('~Bundle$~', $repo->name)) {
					$req->value = '2';
					$repo->type = 'bundle';
				}


		$commitInfo = $gitHub->getCommitApi()->getBranchCommits($repo->owner, $repo->name, 'master');
		$fileInfo = null;
		foreach (array('README.markdown', 'README.md', 'README') as $filename) {
			try {
				$fileInfo = $gitHub->getObjectApi()->showBlob($repo->owner, $repo->name, $commitInfo[0]['parents'][0]['id'], $filename);
			}
			catch (Exception $e) {
				// do nothing :(
			}
			if ($fileInfo) {
				$documentation = new Documentation();
				$documentation->text = $fileInfo['data'];
        $documentation->text_hash = md5($fileInfo['data']);
				$repo->Documentation = $documentation;
				break;
			}
		}
      $repo->save();
      $req->repository_id = $repo->id;
      $req->save();

        return $repo;


    }
}