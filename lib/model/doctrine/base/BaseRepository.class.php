<?php

/**
 * BaseRepository
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $owner
 * @property string $source
 * @property string $parent
 * @property clob $description
 * @property integer $forks
 * @property integer $watchers
 * @property boolean $fork
 * @property boolean $private
 * @property string $homepage
 * @property boolean $has_wiki
 * @property boolean $has_issues
 * @property boolean $has_downloads
 * @property integer $inner_rate
 * @property enum $type
 * @property enum $works
 * @property integer $percent
 * @property integer $total
 * @property boolean $is_verified
 * @property boolean $is_recomended
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property doGitHubUser $Owner
 * @property Doctrine_Collection $Requirements
 * @property Documentation $Documentation
 * @property Doctrine_Collection $Posts
 * 
 * @method string              getName()          Returns the current record's "name" value
 * @method string              getOwner()         Returns the current record's "owner" value
 * @method string              getSource()        Returns the current record's "source" value
 * @method string              getParent()        Returns the current record's "parent" value
 * @method clob                getDescription()   Returns the current record's "description" value
 * @method integer             getForks()         Returns the current record's "forks" value
 * @method integer             getWatchers()      Returns the current record's "watchers" value
 * @method boolean             getFork()          Returns the current record's "fork" value
 * @method boolean             getPrivate()       Returns the current record's "private" value
 * @method string              getHomepage()      Returns the current record's "homepage" value
 * @method boolean             getHasWiki()       Returns the current record's "has_wiki" value
 * @method boolean             getHasIssues()     Returns the current record's "has_issues" value
 * @method boolean             getHasDownloads()  Returns the current record's "has_downloads" value
 * @method integer             getInnerRate()     Returns the current record's "inner_rate" value
 * @method enum                getType()          Returns the current record's "type" value
 * @method enum                getWorks()         Returns the current record's "works" value
 * @method integer             getPercent()       Returns the current record's "percent" value
 * @method integer             getTotal()         Returns the current record's "total" value
 * @method boolean             getIsVerified()    Returns the current record's "is_verified" value
 * @method boolean             getIsRecomended()  Returns the current record's "is_recomended" value
 * @method timestamp           getCreatedAt()     Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()     Returns the current record's "updated_at" value
 * @method doGitHubUser        getOwner()         Returns the current record's "Owner" value
 * @method Doctrine_Collection getRequirements()  Returns the current record's "Requirements" collection
 * @method Documentation       getDocumentation() Returns the current record's "Documentation" value
 * @method Doctrine_Collection getPosts()         Returns the current record's "Posts" collection
 * @method Repository          setName()          Sets the current record's "name" value
 * @method Repository          setOwner()         Sets the current record's "owner" value
 * @method Repository          setSource()        Sets the current record's "source" value
 * @method Repository          setParent()        Sets the current record's "parent" value
 * @method Repository          setDescription()   Sets the current record's "description" value
 * @method Repository          setForks()         Sets the current record's "forks" value
 * @method Repository          setWatchers()      Sets the current record's "watchers" value
 * @method Repository          setFork()          Sets the current record's "fork" value
 * @method Repository          setPrivate()       Sets the current record's "private" value
 * @method Repository          setHomepage()      Sets the current record's "homepage" value
 * @method Repository          setHasWiki()       Sets the current record's "has_wiki" value
 * @method Repository          setHasIssues()     Sets the current record's "has_issues" value
 * @method Repository          setHasDownloads()  Sets the current record's "has_downloads" value
 * @method Repository          setInnerRate()     Sets the current record's "inner_rate" value
 * @method Repository          setType()          Sets the current record's "type" value
 * @method Repository          setWorks()         Sets the current record's "works" value
 * @method Repository          setPercent()       Sets the current record's "percent" value
 * @method Repository          setTotal()         Sets the current record's "total" value
 * @method Repository          setIsVerified()    Sets the current record's "is_verified" value
 * @method Repository          setIsRecomended()  Sets the current record's "is_recomended" value
 * @method Repository          setCreatedAt()     Sets the current record's "created_at" value
 * @method Repository          setUpdatedAt()     Sets the current record's "updated_at" value
 * @method Repository          setOwner()         Sets the current record's "Owner" value
 * @method Repository          setRequirements()  Sets the current record's "Requirements" collection
 * @method Repository          setDocumentation() Sets the current record's "Documentation" value
 * @method Repository          setPosts()         Sets the current record's "Posts" collection
 * 
 * @package    symfohub
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRepository extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('repository');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('owner', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('source', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('parent', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('forks', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('watchers', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('fork', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('private', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('homepage', 'string', 1000, array(
             'type' => 'string',
             'length' => 1000,
             ));
        $this->hasColumn('has_wiki', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('has_issues', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('has_downloads', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('inner_rate', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'snippet',
              1 => 'bundle',
              2 => 'plugin',
              3 => 'application',
              4 => 'tool',
             ),
             ));
        $this->hasColumn('works', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'yes',
              1 => 'patch',
              2 => 'no',
              3 => 'old',
              4 => 'unknown',
             ),
             'default' => 'unknown',
             ));
        $this->hasColumn('percent', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('total', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('is_verified', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('is_recomended', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('created_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('updated_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));


        $this->index('innner_rate', array(
             'fields' => 
             array(
              0 => 'inner_rate',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('doGitHubUser as Owner', array(
             'local' => 'owner',
             'foreign' => 'username'));

        $this->hasMany('Requirement as Requirements', array(
             'local' => 'id',
             'foreign' => 'repository_id'));

        $this->hasOne('Documentation', array(
             'local' => 'id',
             'foreign' => 'repository_id'));

        $this->hasMany('Post as Posts', array(
             'local' => 'id',
             'foreign' => 'repository_id'));

        $taggable0 = new Taggable();
        $rattable0 = new Rattable(array(
             'max_rate' => 4,
             'rounding_rate' => 0.1,
             'user' => 
             array(
              'class' => 'doGitHubUser',
              'type' => 'bigint',
              'size' => 20,
             ),
             ));
        $searchable0 = new Doctrine_Template_Searchable(array(
             'fields' => 
             array(
              0 => 'name',
              1 => 'description',
              2 => 'tags',
             ),
             ));
        $this->actAs($taggable0);
        $this->actAs($rattable0);
        $this->actAs($searchable0);
    }
}